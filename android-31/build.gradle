buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
    }
}

plugins {
    // Publish the generated resources as Maven Artifacts.
    // See: https://docs.gradle.org/current/userguide/publishing_setup.html#publishing_overview and: https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component
    id 'maven-publish'
}

// Retrieve local context
def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))
retrieveFromEnv(localProperties) // There must be a more elegant way to do this...

def versionProperties = new Properties()
versionProperties.load(new FileInputStream(rootProject.file("versions.properties")))

// Expose custom properties to all modules in the project.
ext {
    githubUrl = 'https://github.com/bsinou/android-31.git'

    // Expose properties retrieved from files to child projects
    configs = localProperties
    ownVersions = versionProperties
}

allprojects {

    repositories {

        // Typically useful when working on the Java SDK so that we can use updated code without publishing to bintray.
        mavenLocal()

        // Using both google and maven Central to resolve dependencies.
        google()
        mavenCentral()
    }
}


/* Factorise some of the methods used in various sub projects */

// Pre-create generic common pom configuration:
ext.getBasePom = { repoURL  ->
    return {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }

        developers {
            developer {
                id "bsinou"
                name "Bruno Sinou"
                email "bruno.sinou@posteo.de"
            }
        }

        scm {
            url repoURL
        }
    }
}

// Override local.properties sensitive values with environment parameter
def static retrieveFromEnv (Properties props) {

    def tmpValue = System.getenv('ANDROID_KEYSTORE_PATH')
    if (tmpValue != null){
        props['keystore.path'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_KEYSTORE_PWD')
    if (tmpValue != null){
        props['keystore.pwd'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_SIGNKEY_ALIAS')
    if (tmpValue != null){
        props['signkey.alias'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_SIGNKEY_PWD')
    if (tmpValue != null){
        props['signkey.pwd'] = tmpValue
    }
}
